#!/usr/bin/env ruby

module Reorganise
	class Reorganise

		require 'optparse'
		require 'to_regexp'
		require 'fileutils'

		attr_accessor :options, :matcher, :extensions, :directory, :series_name

		def initialize(argv)
		
			@extensions = [:avi, :mp4, :mkv]		
			@options = {}
			@matcher = /(?:S(\d+)x?E(\d+)|(\d{1,2})(\d{2,})|(\d+)x(\d+))/i

			parse_options!(argv)
			sort!

		end

		def parse_options!(argv)
			optparse = OptionParser.new(argv) do |opts|
				opts.banner = "Usage: rename.rb [options]\n\nCommand options:"

				@options[:regex] = @matcher

				opts.on('-i', '--input-dir DIRECTORY', 'Specifies where to look for episodes to rename.') do |dir_name|
					@options[:directory] = dir_name
				end		

				opts.on('-n', '--name NAME', 'What to rename the series to. Title is derived from series if not given.') do |name|
					@options[:series_name] = sanitize_user_string(name)
				end
			
				@options[:confirm] = false
				opts.on('-c', '--confirm', 'Confirms the go ahead to rename files. Only pretends to rename files to show the effects if not given.') do |regex|
					@options[:confirm] = true
				end
			
				opts.on('-r', '--regexp MATCHER', 'Alternative regexp matcher.') do |regex|
					@options[:regex] = regex.to_regexp
				end

				@options[:verbose] = false
				opts.on('-v', '--verbose', 'Verbose output. Automatically selected for pretend runs.') do |regex|
					@options[:verbose] = true
				end

				opts.on('-h', '--help', 'Display this to screen.') do
					puts opts
					exit
				end	
			end

			optparse.parse!
		end

		def sort!
			@directory = @options[:directory]
			@series_name = @options[:series_name]
		
			if directory.nil? or !Dir.exists?(directory)
				puts "ERROR: Directory '#{directory}' does not exist. Run with -h for more information."
				exit
			end
		
			Dir.chdir(directory)
			filenames = Dir.glob("**/*.{#{@extensions.join(",")}}")

			puts "------------------------------------------------------------------------"
			puts "Finding all files with the following extensions: #{@extensions.join(", ")}"
			puts ""
			puts "Directory: #{directory}"
			puts "Found #{filenames.size} files."
			puts "------------------------------------------------------------------------"
			puts ""
			puts ""
			puts "!!! NOTICE: This is a PRETEND renaming to show what would happen. !!! "
			puts "To confirm the renaming of files, run the command again with -c. e.g. `reorganise -c -d [directory] -n [series name]"
			puts ""
			puts ""
			puts "Starting to rename files using regex #{@options[:regex]}..."
			puts ""

			filenames.each do |filename|
				if File.file?(filename)

					if details = parse_filename(filename)
				
							old_directory = File.absolute_path(File.dirname(filename))
						
							# Check to see if the files were already organised into season folders
							if old_directory.split("/").last.downcase == "season #{details[:season].to_i}"
								target_directory = old_directory
							else
								target_directory = File.join(old_directory, "Season #{details[:season].to_i}")
							end
						
							if details[:series_name]
								renamed_file = "#{details[:series_name]} - S#{details[:season]}E#{details[:episode]}#{details[:ext]}"
							else
								renamed_file = "S#{details[:season]}E#{details[:episode]}#{details[:ext]}"
							end
						
							# Perform mv if confimed
							if @options[:confirm]
								FileUtils.mkdir_p(target_directory)
								FileUtils.mv(File.join(old_directory, details[:basename]), File.join(target_directory, renamed_file))
							end
				
							if @options[:verbose] or !@options[:confirm]
								puts "-: #{File.join(old_directory, details[:basename])}"
								puts "+: #{File.join(target_directory, renamed_file)}"
								puts ""
							end
					else
						puts "ERROR: Skipped file \"#{filename}\" due to invalid file format."
					end
				else
					puts "ERROR: Skipped non-file \"#{filename}\"."
				end			

			end
		
			puts ""
			puts "Finished renaming #{filenames.size} files."
		
			if !@options[:confirm]
				puts ""
				puts "!!! NOTICE: This was a pretend run, nothing was renamed. !!!"
				puts "To confirm the renaming, run this command again with -c"
			end
		end
	
		def parse_filename(filename)
			basename = File.basename(filename)
			extension = File.extname(filename)
		
			parts = basename.gsub(/[-._]/i, " ").strip.split(" ")
		
			position = season = episode = -1
		
			parts.each_with_index do |v, k|
				if v =~ @matcher
					season = "%02d" % ($1 || $3 || $5).to_i
					episode = "%02d" % ($2 || $4 || $6).to_i
					position = k
				
					break if position != -1
				end
			end
		
			if position != -1
				# No title if episode numbers are first
				if position == 0
					title = (@series_name) ? @series_name : nil
				else
					title = parts[0..position-1].map{|p| p.capitalize}.join(" ")
				end
				details = {:basename => basename, :ext =>  extension, :season => season, :episode => episode}			
				details[:series_name] = (@series_name.nil?) ? title : @series_name
				details
			else
				false 
			end
		end	
	
		def sanitize_user_string(str)
			return false if str.empty?
			str = str.gsub(/[^\s\w.\-]/, '')
			str  
		end

	end
end

Reorganise::Reorganise.new(ARGV)


