#!/usr/bin/env ruby

module Reorganise
	class Reorganise

		require 'optparse'
		require 'to_regexp'
		require 'fileutils'

				attr_accessor :options, :matcher, :extensions, :directory, :series_name, :output_dir

		def initialize(argv)
			
			@extensions = [:avi, :mp4, :mkv]		
			@options = {}
			@matcher = /(?:S(\d+)x?E(\d+)|(\d{1,2})(\d{2,})|(\d+)x(\d+))/i

			parse_options!(argv)
			sort!

		end

		def parse_options!(argv)
			optparse = OptionParser.new(argv) do |opts|
				opts.banner = "Usage: reorganise [options]\n\nCommand options:"

				@options[:regex] = @matcher

				opts.on('-i', '--input-dir DIRECTORY', 'Specifies where to look for episodes to rename.') do |dir_name|
					@options[:input_directory] = dir_name.gsub(/\\/, "/")
				end		
				
				opts.on('-o', '--output-dir DIRECTORY', 'Specifies where to move renamed files to. Default is the input directory.') do |dir_name|
					@options[:output_directory] = dir_name.gsub(/\\/, "/")
				end			

				opts.on('-n', '--name NAME', 'What to rename the series to. Title is derived from series if not given.') do |name|
					@options[:series_name] = sanitize_user_string(name)
				end
				
				@options[:confirm] = false
				opts.on('-c', '--confirm', 'Confirms the go ahead to rename files. Only pretends to rename files to show the effects if not given.') do |regex|
					@options[:confirm] = true
				end
				
				opts.on('-r', '--regexp MATCHER', 'Alternative regexp matcher.') do |regex|
					@options[:regex] = regex.to_regexp
				end

				@options[:verbose] = false
				opts.on('-v', '--verbose', 'Verbose output. Automatically selected for pretend runs.') do |regex|
					@options[:verbose] = true
				end

				opts.on('-h', '--help', 'Display this to screen.') do
					puts opts
					exit
				end	
			end

			optparse.parse!
		end

		def sort!
			@directory = @options[:input_directory]
			@series_name = @options[:series_name]
			@output_dir = @options[:output_directory]
			
			if directory.nil? or !Dir.exists?(@directory)
				puts "ERROR: Directory '#{@directory}' does not exist. Run with -h for more information."
				exit
			end
			
			if @output_dir and !Dir.exists?(@output_dir)
				puts "ERROR: Destination directory #{@output_dir} does not exist."		
				exit
			end
			
			Dir.chdir(@directory)
			filenames = Dir.glob("**/*.{#{@extensions.join(",")}}")

			puts "------------------------------------------------------------------------"
			puts "Finding all files with the following extensions: #{@extensions.join(", ")}"
			puts ""
			puts "Directory: #{@directory}"
			puts "Found #{filenames.size} files."
			puts "------------------------------------------------------------------------"
			puts ""
			puts ""
			puts "!!! NOTICE: This is a PRETEND renaming to show what would happen. !!! "
			puts "To confirm the renaming of files, run the command again with -c. e.g. `reorganise -c -i [input-dir]"
			puts ""
			puts ""
			puts "Starting to rename files using regex #{@options[:regex]}..."
			puts ""

			filenames.each do |filename|
				if File.file?(filename)

					if details = parse_filename(filename)
					
							old_directory = File.absolute_path(File.dirname(filename))
							old_file = File.join(old_directory, details[:basename])
							
							unless @output_dir
								# Check to see if the files were already organised into season folders
								if old_directory.split("/").last =~ /(?:season (\d+)|^s(\d+)$)/i and details[:season].to_i == ($1 || $2).to_i
									target_directory = File.join(old_directory.split("/")[0..-2].join("/"), "Season #{details[:season].to_i}")
								else
									target_directory = File.join(old_directory, "Season #{details[:season].to_i}")
								end
							else
								unless details[:series_name].nil? or details[:series_name].empty?
									target_directory = File.join(@output_dir, details[:series_name], "Season #{details[:season].to_i}")
								else
									puts "ERROR: Cannot move #{old_file} as it does not have a series name and none was supplied. Please supply a series name with -n [series name]."
									next
								end
							end
							
							if details[:series_name]
								renamed_file = "#{details[:series_name]} - S#{details[:season]}E#{details[:episode]}#{details[:ext]}"
							else
								renamed_file = "S#{details[:season]}E#{details[:episode]}#{details[:ext]}"
							end						
							
							target_file = File.join(target_directory, renamed_file)
							
							# Check if the target file already exists
							unless File.file?(target_file)
							
								if @options[:verbose] or !@options[:confirm]
									puts "-: #{old_file}"
									puts "+: #{target_file}"
									#puts ""
								end							
													
								# Perform mv if confimed
								if @options[:confirm]
									FileUtils.mkdir_p(target_directory)
									FileUtils.mv(old_file, target_file)
									try_delete_folder(old_directory)
								end
								
							else						
								puts "ERROR: Could not move #{old_file} to #{target_file} as it already exists."													
							end
					else
						puts "ERROR: Skipped file #{filename} due to invalid file format."
					end
				else
					puts "ERROR: Skipped non-file #{filename}."
				end			

			end
			
			puts ""
			puts "Finished renaming #{filenames.size} files."
			
			if !@options[:confirm]
				puts ""
				puts "!!! NOTICE: This was a pretend run, nothing was renamed. !!!"
				puts "To confirm the renaming, run this command again with -c"
			end
		end
		
		def parse_filename(filename)
			basename = File.basename(filename)
			extension = File.extname(filename)
			
			cleaned_name = basename.gsub(/[-._]/i, " ").strip
			parts = cleaned_name.split(" ")
			
			position = season = episode = -1
			
			parts.each_with_index do |v, k|
				if v =~ @matcher
					season = "%02d" % ($1 || $3 || $5 || $7).to_i
					episode = "%02d" % ($2 || $4 || $6 || $8).to_i
					position = k
					
					break if position != -1
				end
			end
			
			if position == -1
				if cleaned_name =~ /(.*)s(\d){1,2}.?e(\d){1,2}/i
					title = $1.strip.split(" ")
					if title.empty?
						title = nil
					else
						title = title.map{|p| p.capitalize}.join(" ")
					end
					season = "%02d" % $2
					episode = "%02d" % $3
					position = 1
				end
			else
				if position == 0
					title = (@series_name) ? @series_name : nil
				else
					title = parts[0..position-1].map{|p| p.capitalize}.join(" ")
				end			
			end
					
			if position != -1
				details = {:basename => basename, :ext =>  extension, :season => season, :episode => episode}			
				details[:series_name] = (@series_name.nil?) ? title : @series_name
				details
			else
				return false
			end		
			
		end	
		
		def try_delete_folder(directory)
			files = Dir.glob(File.join(directory, "*"))
			if files.empty?		
				puts "Deleting empty folder: #{directory}" if @options[:verbose]			
				begin
				  FileUtils.rmdir(directory)
				rescue Errno::ENOTEMPTY
				  puts "ERROR: Cannot delete folder #{directory} as it is not empty."
				end
			end
		end
		
		def sanitize_user_string(str)
			return false if str.empty?
			str = str.gsub(/[^\s\w.\-]/, '')
			str  
		end
	end
end

Reorganise::Reorganise.new(ARGV)


